@startuml
scale 1
class Edificio
{
    - {static} Habitacion habitacion
    + {static} areaConMayorSuciedadEnHabitacion()
    + {static} main()
}
class Habitacion
{
    - Dibujable[][] suelo
    - int ancho
    - int largo
    + constructor(int ancho, int largo)
    + limpiarHabitacion()
    + mostrarHabitacion()
    + suciedadTotal()
    + areaConMayorSuciedad()
    + suciedadRestante()
}

abstract class Dibujable{
    - int posX
    - int posY
    - String simbolo
    + dibujar()
    + estaLibre()
}

abstract class Entidad extends Dibujable {
    - int[][] coordenadasDeMovimiento
    - Dibujable encimaDe
    + mover(int posX, int posY)
    + proximoMovimiento()
}
class Aspiradora extends Entidad{
    - Bateria bateria
    - Bolsa bolsa
    - int pasos
    + constructor()
    + limpiar()
    + bolsaLlena()
    + cargaBateria()
    + cargarBateria()
    + vaciarBolsa()
    + areaConMayorSuciedad()
}

class Gato extends Entidad{
    - bool estado
    - int impaciencia
    + constructor()
    + cambioEstado()
    + ensuciar()
}
class Mueble extends Dibujable{
    - Map<String, String> tipoDeMueble
    + constructor()
    + getTipoDeMueble()
}

class Suciedad extends Dibujable{
    - String[] nivelesDeSuciedad
    - int nivelDeSuciedad
    + constructor()
    + getNivelDeSuciedad()
    + aumentarSuciedad()
    + reducirSuciedad()
}

class Batería{
    - int carga
    - int cantidad
    + constructor()
    + cargar()
    + descargar()
}

class Bolsa{
    - int capacidad
    - int cantidad
    + constructor()
    + llenar()
    + vaciar()
}


Edificio *--> Habitacion

Habitacion *--> Dibujable : contiene

Aspiradora o--> Suciedad : elimina
Aspiradora *-l-> Bolsa : tiene
Aspiradora *-d-> Batería : tiene
Aspiradora -u-> Edificio

Gato o..> Suciedad : produce

@enduml